---
# Source: fence/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fence-sa
  labels:
    helm.sh/chart: fence-0.1.0
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
    app.kubernetes.io/version: "2022.05"
    app.kubernetes.io/managed-by: Helm
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::707767160287:role/gen3_service/emalinowskiv1--default--audit-sqs-sender
---
# Source: fence/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.6
    app.kubernetes.io/instance: fence
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cGFzc3dvcmQhMTIz"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: fence/templates/fence-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-config
type: Opaque
data:
  fence-config.yaml: 
---
# Source: fence/templates/fence-creds.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-creds
type: Opaque
stringData:
  creds.json: |-
      {
        "db_host": "fence-postgressql",
        "db_username": "fence_user",
        "db_password": "",
        "db_database": "fence",
        "hostname": "brh.data-commons.org",
        "indexd_password": "",
        "google_client_secret": "YOUR.GOOGLE.SECRET",
        "google_client_id": "YOUR.GOOGLE.CLIENT",
        "hmac_key": ""
      }
---
# Source: fence/templates/fence-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-secret
type: Opaque
data:
  config_helper.py: aW1wb3J0IGpzb24KaW1wb3J0IG9zCmltcG9ydCBjb3B5CmltcG9ydCBhcmdwYXJzZQppbXBvcnQgcmUKaW1wb3J0IHR5cGVzCgojCiMgbWFrZSBpdCBlYXN5IHRvIGNoYW5nZSB0aGlzIGZvciB0ZXN0aW5nClhER19EQVRBX0hPTUUgPSBvcy5nZXRlbnYoIlhER19EQVRBX0hPTUUiLCAiL3Vzci9zaGFyZS8iKQoKCmRlZiBkZWZhdWx0X3NlYXJjaF9mb2xkZXJzKGFwcF9uYW1lKToKICAgICIiIgogICAgUmV0dXJuIHRoZSBsaXN0IG9mIGZvbGRlcnMgdG8gc2VhcmNoIGZvciBjb25maWd1cmF0aW9uIGZpbGVzCiAgICAiIiIKICAgIHJldHVybiBbCiAgICAgICAgIiVzL2NkaXMvJXMiICUgKFhER19EQVRBX0hPTUUsIGFwcF9uYW1lKSwKICAgICAgICAiL3Vzci9zaGFyZS9jZGlzLyVzIiAlIGFwcF9uYW1lLAogICAgICAgICIlcy9nZW4zLyVzIiAlIChYREdfREFUQV9IT01FLCBhcHBfbmFtZSksCiAgICAgICAgIi91c3Ivc2hhcmUvZ2VuMy8lcyIgJSBhcHBfbmFtZSwKICAgICAgICAiL3Zhci93d3cvJXMiICUgYXBwX25hbWUsCiAgICAgICAgIi9ldGMvZ2VuMy8lcyIgJSBhcHBfbmFtZSwKICAgIF0KCgpkZWYgZmluZF9wYXRocyhmaWxlX25hbWUsIGFwcF9uYW1lLCBzZWFyY2hfZm9sZGVycz1Ob25lKToKICAgICIiIgogICAgU2VhcmNoIHRoZSBnaXZlbiBmb2xkZXJzIGZvciBmaWxlX25hbWUKICAgIHNlYXJjaF9mb2xkZXJzIGRlZmF1bHRzIHRvIGRlZmF1bHRfc2VhcmNoX2ZvbGRlcnMgaWYgbm90IHNwZWNpZmllZAogICAgcmV0dXJuIHRoZSBmaXJzdCBwYXRoIHRvIGZpbGVfbmFtZSBmb3VuZAogICAgIiIiCiAgICBzZWFyY2hfZm9sZGVycyA9IHNlYXJjaF9mb2xkZXJzIG9yIGRlZmF1bHRfc2VhcmNoX2ZvbGRlcnMoYXBwX25hbWUpCiAgICBwb3NzaWJsZV9maWxlcyA9IFtvcy5wYXRoLmpvaW4oZm9sZGVyLCBmaWxlX25hbWUpIGZvciBmb2xkZXIgaW4gc2VhcmNoX2ZvbGRlcnNdCiAgICByZXR1cm4gW3BhdGggZm9yIHBhdGggaW4gcG9zc2libGVfZmlsZXMgaWYgb3MucGF0aC5leGlzdHMocGF0aCldCgoKZGVmIGxvYWRfanNvbihmaWxlX25hbWUsIGFwcF9uYW1lLCBzZWFyY2hfZm9sZGVycz1Ob25lKToKICAgICIiIgogICAganNvbi5sb2FkKGZpbGVfbmFtZSkgYWZ0ZXIgZmluZGluZyBmaWxlX25hbWUgaW4gc2VhcmNoX2ZvbGRlcnMKCiAgICByZXR1cm4gdGhlIGxvYWRlZCBqc29uIGRhdGEgb3IgTm9uZSBpZiBmaWxlIG5vdCBmb3VuZAogICAgIiIiCiAgICBhY3R1YWxfZmlsZXMgPSBmaW5kX3BhdGhzKGZpbGVfbmFtZSwgYXBwX25hbWUsIHNlYXJjaF9mb2xkZXJzKQogICAgaWYgbm90IGFjdHVhbF9maWxlczoKICAgICAgICByZXR1cm4gTm9uZQogICAgd2l0aCBvcGVuKGFjdHVhbF9maWxlc1swXSwgInIiKSBhcyByZWFkZXI6CiAgICAgICAgcmV0dXJuIGpzb24ubG9hZChyZWFkZXIpCgoKZGVmIGluamVjdF9jcmVkc19pbnRvX2ZlbmNlX2NvbmZpZyhjcmVkc19maWxlX3BhdGgsIGNvbmZpZ19maWxlX3BhdGgpOgogICAgY3JlZHNfZmlsZSA9IG9wZW4oY3JlZHNfZmlsZV9wYXRoLCAiciIpCiAgICBjcmVkcyA9IGpzb24ubG9hZChjcmVkc19maWxlKQogICAgY3JlZHNfZmlsZS5jbG9zZSgpCgogICAgIyBnZXQgc2VjcmV0IHZhbHVlcyBmcm9tIGNyZWRzLmpzb24gZmlsZQogICAgZGJfaG9zdCA9IF9nZXRfbmVzdGVkX3ZhbHVlKGNyZWRzLCAiZGJfaG9zdCIpCiAgICBkYl91c2VybmFtZSA9IF9nZXRfbmVzdGVkX3ZhbHVlKGNyZWRzLCAiZGJfdXNlcm5hbWUiKQogICAgZGJfcGFzc3dvcmQgPSBfZ2V0X25lc3RlZF92YWx1ZShjcmVkcywgImRiX3Bhc3N3b3JkIikKICAgIGRiX2RhdGFiYXNlID0gX2dldF9uZXN0ZWRfdmFsdWUoY3JlZHMsICJkYl9kYXRhYmFzZSIpCiAgICBob3N0bmFtZSA9IF9nZXRfbmVzdGVkX3ZhbHVlKGNyZWRzLCAiaG9zdG5hbWUiKQogICAgaW5kZXhkX3Bhc3N3b3JkID0gX2dldF9uZXN0ZWRfdmFsdWUoY3JlZHMsICJpbmRleGRfcGFzc3dvcmQiKQogICAgZ29vZ2xlX2NsaWVudF9zZWNyZXQgPSBfZ2V0X25lc3RlZF92YWx1ZShjcmVkcywgImdvb2dsZV9jbGllbnRfc2VjcmV0IikKICAgIGdvb2dsZV9jbGllbnRfaWQgPSBfZ2V0X25lc3RlZF92YWx1ZShjcmVkcywgImdvb2dsZV9jbGllbnRfaWQiKQogICAgaG1hY19rZXkgPSBfZ2V0X25lc3RlZF92YWx1ZShjcmVkcywgImhtYWNfa2V5IikKICAgIGRiX3BhdGggPSAicG9zdGdyZXNxbDovL3t9Ont9QHt9OjU0MzIve30iLmZvcm1hdCgKICAgICAgICBkYl91c2VybmFtZSwgZGJfcGFzc3dvcmQsIGRiX2hvc3QsIGRiX2RhdGFiYXNlCiAgICApCgogICAgY29uZmlnX2ZpbGUgPSBvcGVuKGNvbmZpZ19maWxlX3BhdGgsICJyIikucmVhZCgpCgogICAgcHJpbnQoIiAgREIgaW5qZWN0ZWQgd2l0aCB2YWx1ZShzKSBmcm9tIGNyZWRzLmpzb24iKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZShjb25maWdfZmlsZSwgIkRCIiwgZGJfcGF0aCkKCiAgICBwcmludCgiICBCQVNFX1VSTCBpbmplY3RlZCB3aXRoIHZhbHVlKHMpIGZyb20gY3JlZHMuanNvbiIpCiAgICBjb25maWdfZmlsZSA9IF9yZXBsYWNlKGNvbmZpZ19maWxlLCAiQkFTRV9VUkwiLCAiaHR0cHM6Ly97fS91c2VyIi5mb3JtYXQoaG9zdG5hbWUpKQoKICAgIHByaW50KCIgIElOREVYRF9QQVNTV09SRCBpbmplY3RlZCB3aXRoIHZhbHVlKHMpIGZyb20gY3JlZHMuanNvbiIpCiAgICBjb25maWdfZmlsZSA9IF9yZXBsYWNlKGNvbmZpZ19maWxlLCAiSU5ERVhEX1BBU1NXT1JEIiwgaW5kZXhkX3Bhc3N3b3JkKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZShjb25maWdfZmlsZSwgIklOREVYRF9VU0VSTkFNRSIsICJmZW5jZSIpCgogICAgcHJpbnQoIiAgRU5DUllQVElPTl9LRVkgaW5qZWN0ZWQgd2l0aCB2YWx1ZShzKSBmcm9tIGNyZWRzLmpzb24iKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZShjb25maWdfZmlsZSwgIkVOQ1JZUFRJT05fS0VZIiwgaG1hY19rZXkpCgogICAgcHJpbnQoCiAgICAgICAgIiAgT1BFTklEX0NPTk5FQ1QvZ29vZ2xlL2NsaWVudF9zZWNyZXQgaW5qZWN0ZWQgd2l0aCB2YWx1ZShzKSAiCiAgICAgICAgImZyb20gY3JlZHMuanNvbiIKICAgICkKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoCiAgICAgICAgY29uZmlnX2ZpbGUsICJPUEVOSURfQ09OTkVDVC9nb29nbGUvY2xpZW50X3NlY3JldCIsIGdvb2dsZV9jbGllbnRfc2VjcmV0CiAgICApCgogICAgcHJpbnQoIiAgT1BFTklEX0NPTk5FQ1QvZ29vZ2xlL2NsaWVudF9pZCBpbmplY3RlZCB3aXRoIHZhbHVlKHMpIGZyb20gY3JlZHMuanNvbiIpCiAgICBjb25maWdfZmlsZSA9IF9yZXBsYWNlKAogICAgICAgIGNvbmZpZ19maWxlLCAiT1BFTklEX0NPTk5FQ1QvZ29vZ2xlL2NsaWVudF9pZCIsIGdvb2dsZV9jbGllbnRfaWQKICAgICkKCiAgICBvcGVuKGNvbmZpZ19maWxlX3BhdGgsICJ3KyIpLndyaXRlKGNvbmZpZ19maWxlKQoKCmRlZiBzZXRfcHJvZF9kZWZhdWx0cyhjb25maWdfZmlsZV9wYXRoKToKICAgIGNvbmZpZ19maWxlID0gb3Blbihjb25maWdfZmlsZV9wYXRoLCAiciIpLnJlYWQoKQoKICAgIHByaW50KAogICAgICAgICIgIENJUlJVU19DRkcvR09PR0xFX0FQUExJQ0FUSU9OX0NSRURFTlRJQUxTIHNldCBhcyAiCiAgICAgICAgInZhci93d3cvZmVuY2UvZmVuY2VfZ29vZ2xlX2FwcF9jcmVkc19zZWNyZXQuanNvbiIKICAgICkKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoCiAgICAgICAgY29uZmlnX2ZpbGUsCiAgICAgICAgIkNJUlJVU19DRkcvR09PR0xFX0FQUExJQ0FUSU9OX0NSRURFTlRJQUxTIiwKICAgICAgICAiL3Zhci93d3cvZmVuY2UvZmVuY2VfZ29vZ2xlX2FwcF9jcmVkc19zZWNyZXQuanNvbiIsCiAgICApCgogICAgcHJpbnQoCiAgICAgICAgIiAgQ0lSUlVTX0NGRy9HT09HTEVfU1RPUkFHRV9DUkVEUyBzZXQgYXMgIgogICAgICAgICJ2YXIvd3d3L2ZlbmNlL2ZlbmNlX2dvb2dsZV9zdG9yYWdlX2NyZWRzX3NlY3JldC5qc29uIgogICAgKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZSgKICAgICAgICBjb25maWdfZmlsZSwKICAgICAgICAiQ0lSUlVTX0NGRy9HT09HTEVfU1RPUkFHRV9DUkVEUyIsCiAgICAgICAgIi92YXIvd3d3L2ZlbmNlL2ZlbmNlX2dvb2dsZV9zdG9yYWdlX2NyZWRzX3NlY3JldC5qc29uIiwKICAgICkKCiAgICBwcmludCgiICBJTkRFWEQgc2V0IGFzIGh0dHA6Ly9pbmRleGQtc2VydmljZS8iKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZShjb25maWdfZmlsZSwgIklOREVYRCIsICJodHRwOi8vaW5kZXhkLXNlcnZpY2UvIikKCiAgICBwcmludCgiICBBUkJPUklTVCBzZXQgYXMgaHR0cDovL2FyYm9yaXN0LXNlcnZpY2UvIikKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoY29uZmlnX2ZpbGUsICJBUkJPUklTVCIsICJodHRwOi8vYXJib3Jpc3Qtc2VydmljZS8iKQoKICAgIHByaW50KCIgIEhUVFBfUFJPWFkvaG9zdCBzZXQgYXMgY2xvdWQtcHJveHkuaW50ZXJuYWwuaW8iKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZShjb25maWdfZmlsZSwgIkhUVFBfUFJPWFkvaG9zdCIsICJjbG91ZC1wcm94eS5pbnRlcm5hbC5pbyIpCgogICAgcHJpbnQoIiAgSFRUUF9QUk9YWS9wb3J0IHNldCBhcyAzMTI4IikKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoY29uZmlnX2ZpbGUsICJIVFRQX1BST1hZL3BvcnQiLCAzMTI4KQoKICAgIHByaW50KCIgIERFQlVHIHNldCB0byBmYWxzZSIpCiAgICBjb25maWdfZmlsZSA9IF9yZXBsYWNlKGNvbmZpZ19maWxlLCAiREVCVUciLCBGYWxzZSkKCiAgICBwcmludCgiICBNT0NLX0FVVEggc2V0IHRvIGZhbHNlIikKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoY29uZmlnX2ZpbGUsICJNT0NLX0FVVEgiLCBGYWxzZSkKCiAgICBwcmludCgiICBNT0NLX0dPT0dMRV9BVVRIIHNldCB0byBmYWxzZSIpCiAgICBjb25maWdfZmlsZSA9IF9yZXBsYWNlKGNvbmZpZ19maWxlLCAiTU9DS19HT09HTEVfQVVUSCIsIEZhbHNlKQoKICAgIHByaW50KCIgIEFVVEhMSUJfSU5TRUNVUkVfVFJBTlNQT1JUIHNldCB0byB0cnVlIikKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoY29uZmlnX2ZpbGUsICJBVVRITElCX0lOU0VDVVJFX1RSQU5TUE9SVCIsIFRydWUpCgogICAgcHJpbnQoIiAgU0VTU0lPTl9DT09LSUVfU0VDVVJFIHNldCB0byB0cnVlIikKICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoY29uZmlnX2ZpbGUsICJTRVNTSU9OX0NPT0tJRV9TRUNVUkUiLCBUcnVlKQoKICAgIHByaW50KCIgIEVOQUJMRV9DU1JGX1BST1RFQ1RJT04gc2V0IHRvIHRydWUiKQogICAgY29uZmlnX2ZpbGUgPSBfcmVwbGFjZShjb25maWdfZmlsZSwgIkVOQUJMRV9DU1JGX1BST1RFQ1RJT04iLCBUcnVlKQoKICAgIG9wZW4oY29uZmlnX2ZpbGVfcGF0aCwgIncrIikud3JpdGUoY29uZmlnX2ZpbGUpCgoKZGVmIGluamVjdF9vdGhlcl9maWxlc19pbnRvX2ZlbmNlX2NvbmZpZyhvdGhlcl9maWxlcywgY29uZmlnX2ZpbGVfcGF0aCk6CiAgICBhZGRpdGlvbmFsX2NmZ3MgPSBfZ2V0X2FsbF9hZGRpdGlvbmFsX2NvbmZpZ3Mob3RoZXJfZmlsZXMpCgogICAgY29uZmlnX2ZpbGUgPSBvcGVuKGNvbmZpZ19maWxlX3BhdGgsICJyIikucmVhZCgpCgogICAgZm9yIGtleSwgdmFsdWUgaW4gYWRkaXRpb25hbF9jZmdzLml0ZXJpdGVtcygpOgogICAgICAgIHByaW50KCIgIHt9IHNldCB0byB7fSIuZm9ybWF0KGtleSwgdmFsdWUpKQogICAgICAgIGNvbmZpZ19maWxlID0gX25lc3RlZF9yZXBsYWNlKGNvbmZpZ19maWxlLCBrZXksIHZhbHVlKQoKICAgIG9wZW4oY29uZmlnX2ZpbGVfcGF0aCwgIncrIikud3JpdGUoY29uZmlnX2ZpbGUpCgoKZGVmIF9nZXRfYWxsX2FkZGl0aW9uYWxfY29uZmlncyhvdGhlcl9maWxlcyk6CiAgICAiIiIKICAgIEF0dGVtcHQgdG8gcGFyc2UgZ2l2ZW4gbGlzdCBvZiBmaWxlcyBhbmQgZXh0cmFjdCBjb25maWd1cmF0aW9uIHZhcmlhYmxlcyBhbmQgdmFsdWVzCiAgICAiIiIKICAgIGFkZGl0aW9uYWxfY29uZmlncyA9IGRpY3QoKQogICAgZm9yIGZpbGVfcGF0aCBpbiBvdGhlcl9maWxlczoKICAgICAgICB0cnk6CiAgICAgICAgICAgIGZpbGVfZXh0ID0gZmlsZV9wYXRoLnN0cmlwKCkuc3BsaXQoIi4iKVstMV0KICAgICAgICAgICAgaWYgZmlsZV9leHQgPT0gImpzb24iOgogICAgICAgICAgICAgICAganNvbl9maWxlID0gb3BlbihmaWxlX3BhdGgsICJyIikKICAgICAgICAgICAgICAgIGNvbmZpZ3MgPSBqc29uLmxvYWQoanNvbl9maWxlKQogICAgICAgICAgICAgICAganNvbl9maWxlLmNsb3NlKCkKICAgICAgICAgICAgZWxpZiBmaWxlX2V4dCA9PSAicHkiOgogICAgICAgICAgICAgICAgY29uZmlncyA9IGZyb21fcHlmaWxlKGZpbGVfcGF0aCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICJDYW5ub3QgbG9hZCBjb25maWcgdmFycyBmcm9tIGEgZmlsZSB3aXRoIGV4dGVudGlvbjoge30iLmZvcm1hdCgKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9leHQKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleGM6CiAgICAgICAgICAgICMgaWYgdGhlcmUncyBhbnkgaXNzdWUgcmVhZGluZyB0aGUgZmlsZSwgZXhpdAogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICJFcnJvciByZWFkaW5nIHt9LiBDYW5ub3QgZ2V0IGNvbmZpZ3VyYXRpb24uIFNraXBwaW5nIHRoaXMgZmlsZS4gIgogICAgICAgICAgICAgICAgIkRldGFpbHM6IHt9Ii5mb3JtYXQob3RoZXJfZmlsZXMsIHN0cihleGMpKQogICAgICAgICAgICApCiAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgIGlmIGNvbmZpZ3M6CiAgICAgICAgICAgIGFkZGl0aW9uYWxfY29uZmlncy51cGRhdGUoY29uZmlncykKCiAgICByZXR1cm4gYWRkaXRpb25hbF9jb25maWdzCgoKZGVmIF9uZXN0ZWRfcmVwbGFjZShjb25maWdfZmlsZSwga2V5LCB2YWx1ZSwgcmVwbGFjZW1lbnRfcGF0aD1Ob25lKToKICAgIHJlcGxhY2VtZW50X3BhdGggPSByZXBsYWNlbWVudF9wYXRoIG9yIGtleQogICAgdHJ5OgogICAgICAgIGZvciBpbm5lcl9rZXksIGlubmVyX3ZhbHVlIGluIHZhbHVlLml0ZXJpdGVtcygpOgogICAgICAgICAgICB0ZW1wX3BhdGggPSByZXBsYWNlbWVudF9wYXRoCiAgICAgICAgICAgIHRlbXBfcGF0aCA9IHRlbXBfcGF0aCArICIvIiArIGlubmVyX2tleQogICAgICAgICAgICBjb25maWdfZmlsZSA9IF9uZXN0ZWRfcmVwbGFjZSgKICAgICAgICAgICAgICAgIGNvbmZpZ19maWxlLCBpbm5lcl9rZXksIGlubmVyX3ZhbHVlLCB0ZW1wX3BhdGgKICAgICAgICAgICAgKQogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICMgbm90IGEgZGljdCBzbyByZXBsYWNlCiAgICAgICAgaWYgdmFsdWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGNvbmZpZ19maWxlID0gX3JlcGxhY2UoY29uZmlnX2ZpbGUsIHJlcGxhY2VtZW50X3BhdGgsIHZhbHVlKQoKICAgIHJldHVybiBjb25maWdfZmlsZQoKCmRlZiBfcmVwbGFjZSh5YW1sX2NvbmZpZywgcGF0aF90b19rZXksIHJlcGxhY2VtZW50X3ZhbHVlLCBzdGFydD0wLCBuZXN0ZWRfbGV2ZWw9MCk6CiAgICAiIiIKICAgIFJlcGxhY2UgYSBuZXN0ZWQgdmFsdWUgaW4gYSBZQU1MIGZpbGUgc3RyaW5nIHdpdGggdGhlIGdpdmVuIHZhbHVlIHdpdGhvdXQKICAgIGxvc2luZyBjb21tZW50cy4gVXNlcyBhIHJlZ2V4IHRvIGRvIHRoZSByZXBsYWNlbWVudC4KCiAgICBBcmdzOgogICAgICAgIHlhbWxfY29uZmlnIChzdHIpOiBhIHN0cmluZyByZXByZXNlbnRpbmcgYSBmdWxsIGNvbmZpZ3VyYXRpb24gZmlsZQogICAgICAgIHBhdGhfdG9fa2V5IChzdHIpOiBuZXN0ZWQvcGF0aC90by9rZXkuIFRoZSB2YWx1ZSBvZiB0aGlzIGtleSB3aWxsIGJlCiAgICAgICAgICAgIHJlcGxhY2VkCiAgICAgICAgcmVwbGFjZW1lbnRfdmFsdWUgKHN0cik6IFJlcGxhY2VtZW50IHZhbHVlIGZvciB0aGUga2V5IGZyb20KICAgICAgICAgICAgcGF0aF90b19rZXkKICAgICIiIgogICAgbmVzdGVkX3BhdGhfdG9fcmVwbGFjZSA9IHBhdGhfdG9fa2V5LnNwbGl0KCIvIikKCiAgICAjIG91ciByZWdleCBsb29rcyBmb3IgYSBzcGVjaWZpYyBudW1iZXIgb2Ygc3BhY2VzIHRvIGVuc3VyZSBjb3JyZWN0CiAgICAjIGxldmVsIG9mIG5lc3RpbmcuIEl0IG1hdGNoZXMgdG8gdGhlIGVuZCBvZiB0aGUgbGluZQogICAgc2VhcmNoX3N0cmluZyA9ICgKICAgICAgICAiICAiICogbmVzdGVkX2xldmVsICsgIi4qIiArIG5lc3RlZF9wYXRoX3RvX3JlcGxhY2VbMF0gKyAiKCcpPyhcIik/Oi4qXG4iCiAgICApCiAgICBtYXRjaGVzID0gcmUuc2VhcmNoKHNlYXJjaF9zdHJpbmcsIHlhbWxfY29uZmlnW3N0YXJ0Ol0pCgogICAgIyBlYXJseSByZXR1cm4gaWYgd2UgaGF2ZW4ndCBmb3VuZCBhbnl0aGluZwogICAgaWYgbm90IG1hdGNoZXM6CiAgICAgICAgcmV0dXJuIHlhbWxfY29uZmlnCgogICAgIyBpZiB3ZSdyZSBvbiB0aGUgbGFzdCBpdGVtIGluIHRoZSBwYXRoLCB3ZSBuZWVkIHRvIGdldCB0aGUgdmFsdWUgYW5kCiAgICAjIHJlcGxhY2UgaXQgaW4gdGhlIG9yaWdpbmFsIGZpbGUKICAgIGlmIGxlbihuZXN0ZWRfcGF0aF90b19yZXBsYWNlKSA9PSAxOgogICAgICAgICMgcmVwbGFjZSB0aGUgY3VycmVudCBrZXk6dmFsdWUgd2l0aCB0aGUgbmV3IHJlcGxhY2VtZW50IHZhbHVlCiAgICAgICAgbWF0Y2hfc3RhcnQgPSBzdGFydCArIG1hdGNoZXMuc3RhcnQoMCkgKyBsZW4oIiAgIiAqIG5lc3RlZF9sZXZlbCkKICAgICAgICBtYXRjaF9lbmQgPSBzdGFydCArIG1hdGNoZXMuZW5kKDApCiAgICAgICAgeWFtbF9jb25maWcgPSAoCiAgICAgICAgICAgIHlhbWxfY29uZmlnWzptYXRjaF9zdGFydF0KICAgICAgICAgICAgKyAie306IHt9XG4iLmZvcm1hdCgKICAgICAgICAgICAgICAgIG5lc3RlZF9wYXRoX3RvX3JlcGxhY2VbMF0sCiAgICAgICAgICAgICAgICBfZ2V0X3lhbWxfcmVwbGFjZW1lbnRfdmFsdWUocmVwbGFjZW1lbnRfdmFsdWUsIG5lc3RlZF9sZXZlbCksCiAgICAgICAgICAgICkKICAgICAgICAgICAgKyB5YW1sX2NvbmZpZ1ttYXRjaF9lbmQ6XQogICAgICAgICkKCiAgICAgICAgcmV0dXJuIHlhbWxfY29uZmlnCgogICAgIyBzZXQgbmV3IHN0YXJ0IHBvaW50IHRvIHBhc3QgY3VycmVudCBtYXRjaCBhbmQgbW92ZSBvbiB0byBuZXh0IG1hdGNoCiAgICBzdGFydCA9IG1hdGNoZXMuZW5kKDApCiAgICBuZXN0ZWRfbGV2ZWwgKz0gMQogICAgZGVsIG5lc3RlZF9wYXRoX3RvX3JlcGxhY2VbMF0KCiAgICByZXR1cm4gX3JlcGxhY2UoCiAgICAgICAgeWFtbF9jb25maWcsCiAgICAgICAgIi8iLmpvaW4obmVzdGVkX3BhdGhfdG9fcmVwbGFjZSksCiAgICAgICAgcmVwbGFjZW1lbnRfdmFsdWUsCiAgICAgICAgc3RhcnQsCiAgICAgICAgbmVzdGVkX2xldmVsLAogICAgKQoKCmRlZiBmcm9tX3B5ZmlsZShmaWxlbmFtZSwgc2lsZW50PUZhbHNlKToKICAgICIiIgogICAgTW9kZWxlZCBhZnRlciBmbGFzaydzIGFiaWxpdHkgdG8gbG9hZCBpbiBweXRob24gZmlsZXM6CiAgICBodHRwczovL2dpdGh1Yi5jb20vcGFsbGV0cy9mbGFzay9ibG9iL21hc3Rlci9mbGFzay9jb25maWcucHkKCiAgICBTb21lIGFsdGVyYXRpb25zIHdlcmUgbWFkZSBidXQgbG9naWMgaXMgZXNzZW50aWFsbHkgdGhlIHNhbWUKICAgICIiIgogICAgZmlsZW5hbWUgPSBvcy5wYXRoLmFic3BhdGgoZmlsZW5hbWUpCiAgICBkID0gdHlwZXMuTW9kdWxlVHlwZSgiY29uZmlnIikKICAgIGQuX19maWxlX18gPSBmaWxlbmFtZQogICAgdHJ5OgogICAgICAgIHdpdGggb3BlbihmaWxlbmFtZSwgbW9kZT0icmIiKSBhcyBjb25maWdfZmlsZToKICAgICAgICAgICAgZXhlYyhjb21waWxlKGNvbmZpZ19maWxlLnJlYWQoKSwgZmlsZW5hbWUsICJleGVjIiksIGQuX19kaWN0X18pCiAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgIHByaW50KCJVbmFibGUgdG8gbG9hZCBjb25maWd1cmF0aW9uIGZpbGUgKHt9KSIuZm9ybWF0KGUuc3RyZXJyb3IpKQogICAgICAgIGlmIHNpbGVudDoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmFpc2UKICAgIHJldHVybiBfZnJvbV9vYmplY3QoZCkKCgpkZWYgX2Zyb21fb2JqZWN0KG9iaik6CiAgICBjb25maWdzID0ge30KICAgIGZvciBrZXkgaW4gZGlyKG9iaik6CiAgICAgICAgaWYga2V5LmlzdXBwZXIoKToKICAgICAgICAgICAgY29uZmlnc1trZXldID0gZ2V0YXR0cihvYmosIGtleSkKICAgIHJldHVybiBjb25maWdzCgoKZGVmIF9nZXRfeWFtbF9yZXBsYWNlbWVudF92YWx1ZSh2YWx1ZSwgbmVzdGVkX2xldmVsPTApOgogICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyKToKICAgICAgICByZXR1cm4gIiciICsgdmFsdWUgKyAiJyIKICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgYm9vbCk6CiAgICAgICAgcmV0dXJuIHN0cih2YWx1ZSkubG93ZXIoKQogICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBsaXN0KSBvciBpc2luc3RhbmNlKHZhbHVlLCBzZXQpOgogICAgICAgIG91dHB1dCA9ICIiCiAgICAgICAgZm9yIGl0ZW0gaW4gdmFsdWU6CiAgICAgICAgICAgICMgc3BhY2VzIGZvciBuZXN0ZWQgbGV2ZWwgdGhlbiBzcGFjZXMgYW5kIGh5cGhlbiBmb3IgZWFjaCBsaXN0IGl0ZW0KICAgICAgICAgICAgb3V0cHV0ICs9ICgKICAgICAgICAgICAgICAgICJcbiIKICAgICAgICAgICAgICAgICsgIiAgIiAqIG5lc3RlZF9sZXZlbAogICAgICAgICAgICAgICAgKyAiICAtICIKICAgICAgICAgICAgICAgICsgX2dldF95YW1sX3JlcGxhY2VtZW50X3ZhbHVlKGl0ZW0pCiAgICAgICAgICAgICAgICArICIiCiAgICAgICAgICAgICkKICAgICAgICByZXR1cm4gb3V0cHV0CiAgICBlbHNlOgogICAgICAgIHJldHVybiB2YWx1ZQoKCmRlZiBfZ2V0X25lc3RlZF92YWx1ZShkaWN0aW9uYXJ5LCBuZXN0ZWRfcGF0aCk6CiAgICAiIiIKICAgIFJldHVybiBhIHZhbHVlIGZyb20gYSBkaWN0aW9uYXJ5IGdpdmVuIGEgcGF0aC1saWtlIG5lc3Rpbmcgb2Yga2V5cy4KCiAgICBXaWxsIGRlZmF1bHQgdG8gYW4gZW1wdHkgc3RyaW5nIGlmIHZhbHVlIGNhbm5vdCBiZSBmb3VuZC4KCiAgICBBcmdzOgogICAgICAgIGRpY3Rpb25hcnkgKGRpY3QpOiBhIGRpY3Rpb25hcnkKICAgICAgICBuZXN0ZWRfcGF0aCAoc3RyKTogbmVzdGVkL3BhdGgvdG8va2V5CgogICAgUmV0dXJuczoKICAgICAgICA/OiBWYWx1ZSBmcm9tIGRpY3QKICAgICIiIgogICAgcmVwbGFjZW1lbnRfdmFsdWVfcGF0aCA9IG5lc3RlZF9wYXRoLnNwbGl0KCIvIikKICAgIHJlcGxhY2VtZW50X3ZhbHVlID0gY29weS5kZWVwY29weShkaWN0aW9uYXJ5KQoKICAgIGZvciBpdGVtIGluIHJlcGxhY2VtZW50X3ZhbHVlX3BhdGg6CiAgICAgICAgcmVwbGFjZW1lbnRfdmFsdWUgPSByZXBsYWNlbWVudF92YWx1ZS5nZXQoaXRlbSwge30pCgogICAgaWYgcmVwbGFjZW1lbnRfdmFsdWUgPT0ge306CiAgICAgICAgcmVwbGFjZW1lbnRfdmFsdWUgPSAiIgoKICAgIHJldHVybiByZXBsYWNlbWVudF92YWx1ZQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItaSIsCiAgICAgICAgIi0tY3JlZHNfZmlsZV90b19pbmplY3QiLAogICAgICAgIGRlZmF1bHQ9ImNyZWRzLmpzb24iLAogICAgICAgIGhlbHA9ImNyZWRzIGZpbGUgdG8gaW5qZWN0IGludG8gdGhlIGNvbmZpZ3VyYXRpb24geWFtbCIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItLW90aGVyX2ZpbGVzX3RvX2luamVjdCIsCiAgICAgICAgbmFyZ3M9IisiLAogICAgICAgIGhlbHA9ImZlbmNlX2NyZWRlbnRpYWxzLmpzb24sIGxvY2FsX3NldHRpbmdzLnB5LCBmZW5jZV9zZXR0aW5ncy5weSBmaWxlKHMpIHRvICIKICAgICAgICAiaW5qZWN0IGludG8gdGhlIGNvbmZpZ3VyYXRpb24geWFtbCIsCiAgICApCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KAogICAgICAgICItYyIsICItLWNvbmZpZ19maWxlIiwgZGVmYXVsdD0iY29uZmlnLnlhbWwiLCBoZWxwPSJjb25maWd1cmF0aW9uIHlhbWwiCiAgICApCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKICAgIGluamVjdF9jcmVkc19pbnRvX2ZlbmNlX2NvbmZpZyhhcmdzLmNyZWRzX2ZpbGVfdG9faW5qZWN0LCBhcmdzLmNvbmZpZ19maWxlKQogICAgc2V0X3Byb2RfZGVmYXVsdHMoYXJncy5jb25maWdfZmlsZSkKCiAgICBpZiBhcmdzLm90aGVyX2ZpbGVzX3RvX2luamVjdDoKICAgICAgICBpbmplY3Rfb3RoZXJfZmlsZXNfaW50b19mZW5jZV9jb25maWcoCiAgICAgICAgICAgIGFyZ3Mub3RoZXJfZmlsZXNfdG9faW5qZWN0LCBhcmdzLmNvbmZpZ19maWxlCiAgICAgICAgKQo=
  fence_settings.py: ZnJvbSBib3RvLnMzLmNvbm5lY3Rpb24gaW1wb3J0IE9yZGluYXJ5Q2FsbGluZ0Zvcm1hdAppbXBvcnQgY29uZmlnX2hlbHBlcgoKQVBQX05BTUUgPSAiZmVuY2UiCgpEQiA9ICJwb3N0Z3Jlc3FsOi8ve3tkYl91c2VybmFtZX19Ont7ZGJfcGFzc3dvcmR9fUB7e2RiX2hvc3R9fTo1NDMyL3t7ZGJfZGF0YWJhc2V9fSIKCk1PQ0tfQVVUSCA9IEZhbHNlCk1PQ0tfU1RPUkFHRSA9IFRydWUKCkVNQUlMX1NFUlZFUiA9ICJsb2NhbGhvc3QiCgpTRU5EX0ZST00gPSAicGhpbGxpcy50dEBnbWFpbC5jb20iCgpTRU5EX1RPID0gInBoaWxsaXMudHRAZ21haWwuY29tIgoKQ0VQSCA9IHsKICAgICJhd3NfYWNjZXNzX2tleV9pZCI6ICIiLAogICAgImF3c19zZWNyZXRfYWNjZXNzX2tleSI6ICIiLAogICAgImhvc3QiOiAiIiwKICAgICJwb3J0IjogNDQzLAogICAgImlzX3NlY3VyZSI6IFRydWUsCiAgICAiY2FsbGluZ19mb3JtYXQiOiBPcmRpbmFyeUNhbGxpbmdGb3JtYXQoKSwKfQoKQVdTID0geyJhd3NfYWNjZXNzX2tleV9pZCI6ICIiLCAiYXdzX3NlY3JldF9hY2Nlc3Nfa2V5IjogIiJ9CgpITUFDX0VOQ1JZUFRJT05fS0VZID0gInt7aG1hY19rZXl9fSIKCgpIT1NUTkFNRSA9ICJ7e2hvc3RuYW1lfX0iCkJBU0VfVVJMID0gImh0dHBzOi8ve3tob3N0bmFtZX19L3VzZXIiCgpPUEVOSURfQ09OTkVDVCA9IHsKICAgICJnb29nbGUiOiB7CiAgICAgICAgImNsaWVudF9pZCI6ICJ7e2dvb2dsZV9jbGllbnRfaWR9fSIsCiAgICAgICAgImNsaWVudF9zZWNyZXQiOiAie3tnb29nbGVfY2xpZW50X3NlY3JldH19IiwKICAgICAgICAicmVkaXJlY3RfdXJsIjogImh0dHBzOi8vIiArIEhPU1ROQU1FICsgIi91c2VyL2xvZ2luL2dvb2dsZS9sb2dpbi8iLAogICAgfQp9CgpIVFRQX1BST1hZID0geyJob3N0IjogImNsb3VkLXByb3h5LmludGVybmFsLmlvIiwgInBvcnQiOiAzMTI4fQoKREVGQVVMVF9EQkdBUCA9IHsKICAgICJzZnRwIjogewogICAgICAgICJob3N0IjogIiIsCiAgICAgICAgInVzZXJuYW1lIjogIiIsCiAgICAgICAgInBhc3N3b3JkIjogIiIsCiAgICAgICAgInBvcnQiOiAyMiwKICAgICAgICAicHJveHkiOiAiIiwKICAgICAgICAicHJveHlfdXNlciI6ICIiLAogICAgfSwKICAgICJkZWNyeXB0X2tleSI6ICIiLAp9CgpTVE9SQUdFX0NSRURFTlRJQUxTID0ge30KIyBhd3NfY3JlZGVudGlhbHMgc2hvdWxkIGJlIGEgZGljdCBsb29rcyBsaWtlOgojIHsgaWRlbnRpZmllcjogeyAnYXdzX2FjY2Vzc19rZXlfaWQnOiAnWFhYJywgJ2F3c19zZWNyZXRfYWNjZXNzX2tleSc6ICdYWFgnIH19CkFXU19DUkVERU5USUFMUyA9IHt9CgojIHMzX2J1Y2tldHMgc2hvdWxkIGJlIGEgZGljdCBsb29rcyBsaWtlOgojIHsgYnVja2V0X25hbWU6IGNyZWRlbnRpYWxfaWRlbnRpZmllIH0KUzNfQlVDS0VUUyA9IHt9CgoKZGVmIGxvYWRfanNvbihmaWxlX25hbWUpOgogICAgcmV0dXJuIGNvbmZpZ19oZWxwZXIubG9hZF9qc29uKGZpbGVfbmFtZSwgQVBQX05BTUUpCgoKZGVmIGdldF9mcm9tX2RpY3QoZGljdGlvbmFyeSwga2V5LCBkZWZhdWx0PSIiKToKICAgIHZhbHVlID0gZGljdGlvbmFyeS5nZXQoa2V5KQogICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICB2YWx1ZSA9IGRlZmF1bHQKICAgIHJldHVybiB2YWx1ZQoKCmNyZWRzID0gbG9hZF9qc29uKCJjcmVkcy5qc29uIikKa2V5X2xpc3QgPSBbImRiX3VzZXJuYW1lIiwgImRiX3Bhc3N3b3JkIiwgImRiX2hvc3QiLCAiZGJfZGF0YWJhc2UiXQoKREIgPSAicG9zdGdyZXNxbDovLyVzOiVzQCVzOjU0MzIvJXMiICUgdHVwbGUoCiAgICBbZ2V0X2Zyb21fZGljdChjcmVkcywgaywgInVua25vd24tIiArIGspIGZvciBrIGluIGtleV9saXN0XQopCkhNQUNfRU5DUllQVElPTl9LRVkgPSBnZXRfZnJvbV9kaWN0KGNyZWRzLCAiaG1hY19rZXkiLCAidW5rbm93bi1obWFjX2tleSIpCkhPU1ROQU1FID0gZ2V0X2Zyb21fZGljdChjcmVkcywgImhvc3RuYW1lIiwgInVua25vd24taG9zdG5hbWUiKQpCQVNFX1VSTCA9ICJodHRwczovLyVzL3VzZXIiICUgSE9TVE5BTUUKCk9QRU5JRF9DT05ORUNUWyJnb29nbGUiXVsiY2xpZW50X2lkIl0gPSBnZXRfZnJvbV9kaWN0KAogICAgY3JlZHMsICJnb29nbGVfY2xpZW50X2lkIiwgInVua25vd24tZ29vZ2xlX2NsaWVudF9pZCIKKQpPUEVOSURfQ09OTkVDVFsiZ29vZ2xlIl1bImNsaWVudF9zZWNyZXQiXSA9IGdldF9mcm9tX2RpY3QoCiAgICBjcmVkcywgImdvb2dsZV9jbGllbnRfc2VjcmV0IiwgInVua25vd24tZ29vZ2xlX2NsaWVudF9zZWNyZXQiCikKT1BFTklEX0NPTk5FQ1RbImdvb2dsZSJdWyJyZWRpcmVjdF91cmwiXSA9ICgKICAgICJodHRwczovLyIgKyBIT1NUTkFNRSArICIvdXNlci9sb2dpbi9nb29nbGUvbG9naW4vIgopCgpHT09HTEVfTUFOQUdFRF9TRVJWSUNFX0FDQ09VTlRfRE9NQUlOUyA9IHsKICAgICJkYXRhZmxvdy1zZXJ2aWNlLXByb2R1Y2VyLXByb2QuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICAgImNsb3VkYnVpbGQuZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiY2xvdWQtbWwuZ29vZ2xlLmNvbS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiY29udGFpbmVyLWVuZ2luZS1yb2JvdC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiZGF0YWZsb3ctc2VydmljZS1wcm9kdWNlci1wcm9kLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAgICJzb3VyY2VyZXBvLXNlcnZpY2UtYWNjb3VudHMuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICAgImRhdGFwcm9jLWFjY291bnRzLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAgICJnYWUtYXBpLXByb2QuZ29vZ2xlLmNvbS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiZ2Vub21pY3MtYXBpLmdvb2dsZS5jb20uaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICAgImNvbnRhaW5lcnJlZ2lzdHJ5LmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAgICJjb250YWluZXItYW5hbHlzaXMuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICAgImNsb3Vkc2VydmljZXMuZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAic3RhY2tkcml2ZXItc2VydmljZS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiYXBwc3BvdC5nc2VydmljZWFjY291bnQuY29tIiwKICAgICJwYXJ0bmVyY29udGVudC5nc2VydmljZWFjY291bnQuY29tIiwKICAgICJ0cmlmYWN0YS1nY2xvdWQtcHJvZC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiZ2NmLWFkbWluLXJvYm90LmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAgICJjb21wdXRlLXN5c3RlbS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAiZ2NwLXNhLXdlYnNlY3VyaXR5c2Nhbm5lci5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgICAic3RvcmFnZS10cmFuc2Zlci1zZXJ2aWNlLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKfQoKQ0lSUlVTX0NGRyA9IHt9CmRhdGEgPSBsb2FkX2pzb24oImZlbmNlX2NyZWRlbnRpYWxzLmpzb24iKQppZiBkYXRhOgogICAgQVdTX0NSRURFTlRJQUxTID0gZGF0YVsiQVdTX0NSRURFTlRJQUxTIl0KICAgIFMzX0JVQ0tFVFMgPSBkYXRhWyJTM19CVUNLRVRTIl0KICAgIERFRkFVTFRfTE9HSU5fVVJMID0gZGF0YVsiREVGQVVMVF9MT0dJTl9VUkwiXQogICAgT1BFTklEX0NPTk5FQ1QudXBkYXRlKGRhdGFbIk9QRU5JRF9DT05ORUNUIl0pCiAgICBPSURDX0lTU1VFUiA9IGRhdGFbIk9JRENfSVNTVUVSIl0KICAgIEVOQUJMRURfSURFTlRJVFlfUFJPVklERVJTID0gZGF0YVsiRU5BQkxFRF9JREVOVElUWV9QUk9WSURFUlMiXQogICAgQVBQX05BTUUgPSBkYXRhWyJBUFBfTkFNRSJdCiAgICBIVFRQX1BST1hZID0gZGF0YVsiSFRUUF9QUk9YWSJdCiAgICBkYkdhUCA9IGRhdGEuZ2V0KCJkYkdhUCIsIERFRkFVTFRfREJHQVApCiAgICBDSVJSVVNfQ0ZHWyJHT09HTEVfQVBJX0tFWSJdID0gZ2V0X2Zyb21fZGljdChkYXRhLCAiR09PR0xFX0FQSV9LRVkiKQogICAgQ0lSUlVTX0NGR1siR09PR0xFX1BST0pFQ1RfSUQiXSA9IGdldF9mcm9tX2RpY3QoZGF0YSwgIkdPT0dMRV9QUk9KRUNUX0lEIikKICAgIENJUlJVU19DRkdbIkdPT0dMRV9BRE1JTl9FTUFJTCJdID0gZ2V0X2Zyb21fZGljdChkYXRhLCAiR09PR0xFX0FETUlOX0VNQUlMIikKICAgIENJUlJVU19DRkdbIkdPT0dMRV9JREVOVElUWV9ET01BSU4iXSA9IGdldF9mcm9tX2RpY3QoZGF0YSwgIkdPT0dMRV9JREVOVElUWV9ET01BSU4iKQogICAgQ0lSUlVTX0NGR1siR09PR0xFX0NMT1VEX0lERU5USVRZX0FETUlOX0VNQUlMIl0gPSBnZXRfZnJvbV9kaWN0KAogICAgICAgIGRhdGEsICJHT09HTEVfQ0xPVURfSURFTlRJVFlfQURNSU5fRU1BSUwiCiAgICApCgogICAgU1RPUkFHRV9DUkVERU5USUFMUyA9IGdldF9mcm9tX2RpY3QoZGF0YSwgIlNUT1JBR0VfQ1JFREVOVElBTFMiLCB7fSkKICAgIEdPT0dMRV9HUk9VUF9QUkVGSVggPSBnZXRfZnJvbV9kaWN0KGRhdGEsICJHT09HTEVfR1JPVVBfUFJFRklYIiwgImdlbjMiKQogICAgU1VQUE9SVF9FTUFJTF9GT1JfRVJST1JTID0gZ2V0X2Zyb21fZGljdChkYXRhLCAiU1VQUE9SVF9FTUFJTF9GT1JfRVJST1JTIiwgTm9uZSkKICAgIFdISVRFX0xJU1RFRF9TRVJWSUNFX0FDQ09VTlRfRU1BSUxTID0gZ2V0X2Zyb21fZGljdCgKICAgICAgICBkYXRhLCAiV0hJVEVfTElTVEVEX1NFUlZJQ0VfQUNDT1VOVF9FTUFJTFMiLCBbXQogICAgKQogICAgV0hJVEVfTElTVEVEX0dPT0dMRV9QQVJFTlRfT1JHUyA9IGdldF9mcm9tX2RpY3QoCiAgICAgICAgZGF0YSwgIldISVRFX0xJU1RFRF9HT09HTEVfUEFSRU5UX09SR1MiLCBbXQogICAgKQogICAgR09PR0xFX01BTkFHRURfU0VSVklDRV9BQ0NPVU5UX0RPTUFJTlMudXBkYXRlKAogICAgICAgIGRhdGEuZ2V0KCJHT09HTEVfTUFOQUdFRF9TRVJWSUNFX0FDQ09VTlRfRE9NQUlOUyIsIFtdKQogICAgKQogICAgR1VOX01BSUwgPSBkYXRhLmdldCgiR1VOX01BSUwiKQogICAgUkVNT1ZFX1NFUlZJQ0VfQUNDT1VOVF9FTUFJTF9OT1RJRklDQVRJT04gPSBkYXRhLmdldCgKICAgICAgICAiUkVNT1ZFX1NFUlZJQ0VfQUNDT1VOVF9FTUFJTF9OT1RJRklDQVRJT04iCiAgICApCiAgICAjIHVzZSBmb3IgaW50ZXJncmF0aW9uIHRlc3RzIHRvIHNraXAgdGhlIGxvZ2luIHBhZ2UKICAgIE1PQ0tfR09PR0xFX0FVVEggPSBkYXRhLmdldCgiTU9DS19HT09HTEVfQVVUSCIsIEZhbHNlKQoKQ0lSUlVTX0NGR1sKICAgICJHT09HTEVfQVBQTElDQVRJT05fQ1JFREVOVElBTFMiCl0gPSAiL3Zhci93d3cvZmVuY2UvZmVuY2VfZ29vZ2xlX2FwcF9jcmVkc19zZWNyZXQuanNvbiIKQ0lSUlVTX0NGR1sKICAgICJHT09HTEVfU1RPUkFHRV9DUkVEUyIKXSA9ICIvdmFyL3d3dy9mZW5jZS9mZW5jZV9nb29nbGVfc3RvcmFnZV9jcmVkc19zZWNyZXQuanNvbiIKCkRFRkFVTFRfTE9HSU5fVVJMX1JFRElSRUNUX1BBUkFNID0gInJlZGlyZWN0IgoKSU5ERVhEID0gImh0dHA6Ly9pbmRleGQtc2VydmljZS8iCgpBUkJPUklTVCA9ICJodHRwOi8vYXJib3Jpc3Qtc2VydmljZS8iCg==
---
# Source: fence/templates/fence-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-google-app-creds-secret
type: Opaque
data:
  fence_google_app_creds_secret.json: ""
---
# Source: fence/templates/fence-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-google-storage-creds-secret
type: Opaque
data:
  fence_google_app_creds_secret.json: ""
---
# Source: fence/templates/jwt-keys.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fence-jwt-keys
type: Opaque
data:
    jwt_private_key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBckUvWDEyU2RGdVdYU2NpaWliSUxaTkZxL2RFUTVtckozY1hYelZpck50MzE0cGNUCjRrK1htcklVWkI1bmNXZXVabC91THpZakxhL0lTRUNEdERtWG9oL05BTGxRaEErUHZDODBKUUtKR0d1NzIzSXgKZVRDLzJvaTNUeW1oVlpWbzNwKzFRVCswdEJyc2U4ZFI3Y296Q05DaVhvZGVhenlYVEZOVERjWDUrZkhHVUYrWAp0am1WSUlnRW9vcHBLR0pYTzVIbDJpQjhiWWV4NWFjczFtUzZlOXAxZEYzOU8rUVUwMFhBb2toMGJxOVBvTTh0Cm5BNWFCTWNDdUJ4YnZMeVR1aEdmZS9hWFFJQW1Pd01Hbi9MZGJBZE1QeENTcUFSdW80TzdDWlZuNmswVDhQZ2IKeW9Sa2xJQ0ZIdVRPdmcvV01OMTYrSUhyRjJWT2ZVK29TSksxcUxBbE5MY0FsWDBOUE5HQzZJMkQ2QVd3bTBuYwp1a3hIVGJuUGU3Q1p1UXZkUWJPa1M0VG02eFZ6K1JRUkxCQnpaS1QycVVxc1Y2SE9sL3RpTnlGTFZtVzlIRzlkCi9zeFB1WThNMTM0RE5YNzcvZVJYQWJWYk1CMnVRc3NwYlIwVDdNdjhjVDh5YWpIR21BNk9vMzV1TkR1TkRwdDgKRU1HTGw3Qjd5TWYrcUIzQVJIRThjRzVOcE9oMFJCWUhDcGdFeHpIZGZPTldVS3Q1SS9JbGpNQ3hoWStTYTErZgpUMEZpcHZHVm5jTzFvaGE2L2JZeGVyR2xtdlZBZG5NVEdCNVZuN0x2ekovbm9xUUlRYWt6RWFVbzl6YjdPN1JaCjNEMGhMSU8zKzRieDRadmltUGRqTUdHYlhJc2NHYUlaV3pvZDlQbEg1Q0EzWi9EZkVVRUFrNUE2K1owQ0F3RUEKQVFLQ0FnQjhtaFFMdHI3OTBySk84WjNQa29jNHRWTDREZGw1dFprYUhMbkx6U1dxUEdGVkpFaUZxMmFHditXTQo3SXVDN3lXbTlCSEo1QTBXT1huTC9aTC9uWEh3RTZ6cnJCWDBHVWlvSFQ1STBRZVFPRCtWRllOL0RtaDl2OFZHCm9tVCsvVmJqUFh3Vm5kcXZMcFQ1Z1EzV3RST29lUzRneXlUVXlQRGppWkdTY1NvdHVzN2NTZlBzR3NHaXo1a0MKYkxKVU9LQzUrK3ZKaXhwUEhnUGZmTDhvblpoWWZZWFh5eXVXeG56a3RoanhnUkZwQks3QksyL2czR1B0OW5jWgo2YS9RMEZESENYMVpaOXpDRUtrVW5VQ0tJMVpJaXhKd3ZDeEJBVXQ4UklMWkVFZ2Zudk1mbWxxR1hLeGEwb0R3CjhTWXJQRXAzOVlDNStVQ21IMlRkcXQrVzh6Z1dmbTBadDRpYWU2VkxRdFpzQzZhK2tBRHFKMjJJLzNsMzJYbmQKMHRybVF1Yk91V29WNmtvQzBpSlZFTkZqQmVOVHVINHdkcGxmRzlMeWxPS2c0VTkxWk9WTkhlalVjNzlpUjkydAoxMEJ1UmdoVERmank0M1QxY1BIM2JFbmFiV2lRdnNiQTlFL0pBWFA5ZVlKNktLN0QrN2N5SlYyUGZlbzF0SlJ1ClFkNlZ6NWF0TUVqYWJtbkRmdFF0SG1rOEJLRWVkTDVyVWRKczNlaDBXbERMQ2RQazI3ZDdaSXdxLzlwUE5MTmEKMXIyVloxV3ltMllwcUovcFRHTmNYaVhtNFJ0R0VadmNFVFBML0hicmZ2TUZrTFBXK1NFVnNYdWV4bGh0K1JjNApZdzNGdWZseFJqdFdZYytJUXNrRzB6NmtSeVZHbVRUSnZjSDFTYlNNRlZvVlJMZmZwUUtDQVFFQTNjaFA0ZmRnClJndHpIVjY3YWdJUmltbDBaZm84a1l2OUNNNzI5aFNsY1hzbW1NS2lWQ3RNT3hWMTI5UFJSejZnbmlCYVBVS2IKcG5jQWZWZzFvRHRXejN4SE9yUkkydk9WeU9XM05lSGFEM3lpNGRpcjl0WTBIU0VsVFpIR0Y2VHgyNHlxb3UvZApoV2o0N1B4KzlrdnRIQzY0TDJuV3JRQnltVitqWUU4UG5yWlNCVjRGTm1OWks4aXp2UU5XdHNjcnJUcWljQmVPCmpaR0NWSTFLOHJwaklleGdpVzM2SDhobGhJWG9mOU1WajU2RE9WcStHTHduRkVkMkwwM2VhWmhuQWFLRkFRZm4KaC9VclNQMmFZVi9mYWxpMyt4Q3QrWnNpSjBTM3BHbUlPNFpRWmc1UjFPSnplU3FkKzEyWiswNllHVllQUU5NMQpIOU5NVXJUeTgzZDMyd0tDQVFFQXh1V2FocW4yUnI1cjlCbmxycS8rNGl6eVZBQ1JBalpObjVxb3dWS0E3cjBMCkFEYW04bEh4Y21IalBoVUE1eHZseTNYVTVxdjFHRDlNSUZrUm84NDBpTDFLdGlFOFpjcnVremdFOHR3K0tRbWsKbE9PNUwxN3BuVjJFY0NQbkYyVVB3dllEaENBMVJuRjVUMWk0L1pESHY4NzNvZXlNc3dPdkt5azBERUUxMEY5RwpyaEFueGs2MHo1c0I1YkdGamR5dnlzVHdVNUhwTXBJVW16L2l6YzI5M1NMTnBra3dqTGhQcm5iVHEvb0pGYU9YCklMbzFpUmVZaU1YVWwrQkZ2Y2Z5Mk5nTTFrMmk1YWEzSHJWWTBrTld5bXpXVGZMekJDaVhnUGRCM1BUL2hJWnMKRDB0ZW1hZWo2SUpvRHFoUGl1UnhPSlR6dXdXeFN0a2s0b0gwdjE5cDV3S0NBUUVBcXJNa21OMlg0aEdwOW04VgpmTkErdy9QS3ZUclBKNDlCb0dmN3VRZkhGd01jZi9NK2tkNEpmR2hXSUc1MTQ0b1dnZDZRMWhuUVIxM01xSzBlCkNVZmkxeXZtZnc2SURNM3krWCtsZGZseHB2M2RPRXRXZ0ZQNkpIbUFocVd1ZkVCZVR3ZUR4b2tzVFNTd2cyY00KS1hIaS9CQVJmNXpNdUxkaGZSOFpWbVZEdG5ySndvdk5JMEZ3UHJ6cGFvK0pUSUViNHVjQVk1b2VCR1I4bGF0eQpoa1JqVEpiczdwb1JMQ2xIeWFwdmV3THkwMm5Ed245UFZTWnNSYldEQjRHOXNEUzNBNUVkSWQvOW1xMWZOWHpNCk9DcGNnVFByMTNmTkVCTVJSSHdsaEl3ZGFRTkdHbWJuSVIxeWwwM3Y3cXJxZTN6UW9KK1dlZVNXUFBxYkFnVjQKQVdCd2hRS0NBUUFOaXFoZ3JzV3p2MWMrUVYwZjdaK2U2b3g5SjZTM3o5YXRIU3lNTFAvV1FVeTBjUVFnejI5dQo2RGMrak5PSTZKOVdvT2tqNDJWR2gxaTVneGJ1WGlXNWdabkttS3l5Q1lVQXhQbWhSMWw4RmNuODBSeFVtMU93CmdTTjVOeGlPd1RTM2cyUnQ1SHQ4RmxHNkUwSlZFVHhvVk1FTFp6MlZHcFVjalN1Y0FmeVYrVWFvcHpUdURZSEYKK0xuQ1Y3bk9GTTVyTWNsakJ6WW5XVWJKNHltZjlYZ056RWJRSVgrS3RTbkhxUk4wVEF1K1Myc0lzV1RmdHBtTwpCbG9aRlEzcWcraUcxdjdZd0dSczJsTHhaa3RyMVdYZFZsZW82dmVjdXQ3Rnl3L1M2V05VTklxNjU5akRBV1RwCmVhZDRDQUdTWlVkSUlPd1BPYTMrZUpaSVRhektNc2JWQW9JQkFRQ0QrUEVUZEgzbmxiM2RzQUFwUVBBbmJUeWUKaGxJdUljc2plUDlhbkgzMzlkNE9BZzhRT2ZWL2M1aFpoNWZiQ3NnUVZ3TThKT1hSVTJaMHVHbTV1TmZiZGVMdgpBb0JIelRUUWQ2TkZ2czNaQTUwdnhKcjdhTlY5eHNhWk9IeHVWcTZqaTVuNTJheng5bjdSVDNsWG1nQTBiWE9FCm9sNmdwcjgrOERvZ2RsOVRsZG9JY1A0ZVdTVXY3T1JPOHNzMkdKK08zMStieUtPODhRZjJSL0FBdjY1NHBFeVEKbFp0V0ovRnRUbEJXNklVQnNRRnVjMVJaakh4b29VaFdTUzg2a202YjFNTzdiUnFLUjlCNHZhcndkR3A4bXJHTQp3cHJ3TlplUUFBU3hhNzhJdDRCc3dWWVdPSlMxUHo3ZFRLcEdLb0VJZjNuUkMrcjFieGFsTzJYaFZtU3oKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
---
# Source: fence/templates/logo-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: logo-config
data:
   logo.svg: <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 116.04 61.15"><defs><style>.cls-1{fill:#232323;}.cls-2{fill:#dccc32;}.cls-3{fill:#222;}</style></defs><title>fresh</title><path class="cls-1" d="M2.7,30C2.7,15.75,11.1,8.67,20,8.67A15.45,15.45,0,0,1,31.8,13.23l-3.12,3.24A12,12,0,0,0,20,13.05c-6,0-11.76,4.2-11.76,16.92,0,12,3.78,17,11,17a15.77,15.77,0,0,0,7.86-2V32.43H19l-.6-4.38H32.34V47.73a25.64,25.64,0,0,1-13.5,3.6C9,51.33,2.7,44.25,2.7,30Z" transform="translate(-1.06 -7.71)"/><path class="cls-1" d="M40.23,34.5H51v3H40.23V47.73H53.42v2.94H36.61V21.73H53l-.42,3H40.23Z" transform="translate(-1.06 -7.71)"/><path class="cls-1" d="M59.63,25.26c.08,1.26.5,6.46.5,10.92V50.67h-3.4V21.73h5L72.06,47.27c0-1.18-.5-5.84-.5-11.05V21.73H75V50.67H69.84Z" transform="translate(-1.06 -7.71)"/><path class="cls-2" d="M95.2,31.06V25.62q4,0,5.44-.9a5.58,5.58,0,0,0,2.49-5.09,5.77,5.77,0,0,0-1.8-4.4,6.37,6.37,0,0,0-4.62-1.72,6,6,0,0,0-4.1,1.28,8.52,8.52,0,0,0-2.08,4.43H84.18q1-6,4-8.73t8.56-2.78a12.73,12.73,0,0,1,9,3.28,11,11,0,0,1,3.5,8.4,10.4,10.4,0,0,1-4.59,9q5.25,3.09,5.25,10a12.19,12.19,0,0,1-3.83,9.29,13.73,13.73,0,0,1-9.82,3.61q-7.62,0-11.32-5.6a14.54,14.54,0,0,1-1.94-6.51h6.15a7.52,7.52,0,0,0,2.39,4.69,7.42,7.42,0,0,0,5,1.63,6.9,6.9,0,0,0,5.11-2.05,7.39,7.39,0,0,0,2-5.34q0-4.26-3-6.07A11.3,11.3,0,0,0,95.2,31.06Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M3.6,68.67H1.06V58.32H3.44c2.51,0,5,.83,5,5.12S5.91,68.67,3.6,68.67Zm.16-9h-1v7.69h1c1.44,0,2.8-.75,2.8-3.91S5.15,59.66,3.76,59.66Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M17.94,67.73l-.39,1.13a1.83,1.83,0,0,1-1.64-1.09,3.14,3.14,0,0,1-2.52,1.09,2.37,2.37,0,0,1-2.61-2.46c0-1.65,1.35-2.59,3.77-2.59h1.12V63.3c0-1-.64-1.44-1.75-1.44a6.47,6.47,0,0,0-2.1.41l-.42-1.19a8.1,8.1,0,0,1,2.77-.54c2.13,0,3.17,1,3.17,2.66v3.53C17.34,67.35,17.52,67.59,17.94,67.73Zm-2.27-1.11V64.86h-.93c-1.57,0-2.19.56-2.19,1.49a1.17,1.17,0,0,0,1.34,1.28A2.11,2.11,0,0,0,15.67,66.62Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M25.53,68.86c-1.85,0-2.82-1-2.82-2.59V62H21V60.75h1.76V59l1.68-.19v2h2.68L26.88,62H24.39v4.27c0,.86.4,1.27,1.38,1.27a3.08,3.08,0,0,0,1.47-.38l.6,1.11A4.47,4.47,0,0,1,25.53,68.86Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M37.83,67.73l-.39,1.13a1.83,1.83,0,0,1-1.64-1.09,3.14,3.14,0,0,1-2.52,1.09,2.37,2.37,0,0,1-2.61-2.46c0-1.65,1.35-2.59,3.77-2.59h1.12V63.3c0-1-.64-1.44-1.75-1.44a6.47,6.47,0,0,0-2.1.41l-.42-1.19a8.1,8.1,0,0,1,2.77-.54c2.13,0,3.17,1,3.17,2.66v3.53C37.23,67.35,37.41,67.59,37.83,67.73Zm-2.27-1.11V64.86h-.93c-1.57,0-2.19.56-2.19,1.49a1.17,1.17,0,0,0,1.34,1.28A2.11,2.11,0,0,0,35.56,66.62Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M58.21,59.16l-.9,1.08a3.28,3.28,0,0,0-2.14-.76c-1.55,0-2.85,1.08-2.85,4s1.23,4,2.86,4a3.49,3.49,0,0,0,2.34-.89l.84,1.06a4.42,4.42,0,0,1-3.24,1.23c-2.64,0-4.62-1.87-4.62-5.38s2.07-5.37,4.59-5.37A4.55,4.55,0,0,1,58.21,59.16Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M67.75,64.7c0,2.51-1.29,4.16-3.58,4.16s-3.59-1.59-3.59-4.15,1.29-4.17,3.6-4.17S67.75,62.18,67.75,64.7Zm-5.4,0c0,2,.6,2.87,1.82,2.87S66,66.67,66,64.7s-.6-2.85-1.8-2.85S62.35,62.75,62.35,64.71Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M78,62.79v5.88H76.5V63c0-.83-.06-1.17-.53-1.17a1.46,1.46,0,0,0-1.17.79v6H73.44V63c0-.83-.06-1.17-.53-1.17a1.45,1.45,0,0,0-1.17.79v6h-1.5V60.75H71.5l.12.85a2.05,2.05,0,0,1,1.7-1.06,1.3,1.3,0,0,1,1.35,1,2.11,2.11,0,0,1,1.74-1C77.31,60.54,78,61,78,62.79Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M87.93,62.79v5.88H86.44V63c0-.83-.06-1.17-.52-1.17a1.46,1.46,0,0,0-1.17.79v6H83.38V63c0-.83-.06-1.17-.52-1.17a1.43,1.43,0,0,0-1.17.79v6h-1.5V60.75h1.26l.12.85a2.05,2.05,0,0,1,1.69-1.06,1.3,1.3,0,0,1,1.35,1,2.13,2.13,0,0,1,1.74-1C87.25,60.54,87.93,61,87.93,62.79Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M97.59,64.7c0,2.51-1.29,4.16-3.59,4.16s-3.58-1.59-3.58-4.15,1.29-4.17,3.6-4.17S97.59,62.18,97.59,64.7Zm-5.4,0c0,2,.6,2.87,1.81,2.87s1.82-.91,1.82-2.88-.6-2.85-1.8-2.85S92.19,62.75,92.19,64.71Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M100.78,60.75h1.46l.12,1a3.31,3.31,0,0,1,2.56-1.25,2.06,2.06,0,0,1,2.21,2.36v5.77h-1.68V63.74c0-1.39-.17-1.91-1.13-1.91A2.42,2.42,0,0,0,102.46,63v5.68h-1.68Z" transform="translate(-1.06 -7.71)"/><path class="cls-3" d="M115.32,66.52c0-.64-.26-.94-1.89-1.36s-2.61-1-2.61-2.34S112,60.54,114,60.54a4.91,4.91,0,0,1,3,.92l-.72,1.06a4,4,0,0,0-2.25-.7c-1.08,0-1.5.34-1.5.87s.43.82,2,1.26,2.56,1,2.56,2.45c0,1.73-1.68,2.46-3.49,2.46a4.86,4.86,0,0,1-3.26-1.11l.89-1a3.76,3.76,0,0,0,2.37.86C114.66,67.59,115.32,67.19,115.32,66.52Z" transform="translate(-1.06 -7.71)"/></svg>
---
# Source: fence/templates/privacy-policy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: privacy-policy
data:
   privacy_policy.md: None
---
# Source: fence/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: fence-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.6
    app.kubernetes.io/instance: fence
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: fence
    app.kubernetes.io/component: primary
---
# Source: fence/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: fence-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.6
    app.kubernetes.io/instance: fence
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: fence
    app.kubernetes.io/component: primary
---
# Source: fence/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fence
  labels:
    helm.sh/chart: fence-0.1.0
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
    app.kubernetes.io/version: "2022.05"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
---
# Source: fence/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fence
  labels:
    helm.sh/chart: fence-0.1.0
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
    app.kubernetes.io/version: "2022.05"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fence
      app.kubernetes.io/instance: fence
  template:
    metadata:
      labels:
        helm.sh/chart: fence-0.1.0
        app.kubernetes.io/name: fence
        app.kubernetes.io/instance: fence
        app.kubernetes.io/version: "2022.05"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: fence-sa
      volumes:
        - name: old-config-volume
          secret:
            secretName: fence-secret
        - name: json-secret-volume
          secret:
            optional: true
            secretName: fence-json-secret
        - name: creds-volume
          secret:
            secretName: fence-creds
        - configMap:
            name: config-helper
            optional: true
          name: config-helper
        - configMap:
            name: logo-config
          name: logo-volume
        - name: config-volume
          secret:
            secretName: fence-config
        - name: fence-google-app-creds-secret-volume
          secret:
            secretName: fence-google-app-creds-secret
        - name: fence-google-storage-creds-secret-volume
          secret:
            secretName: fence-google-storage-creds-secret
        - name: fence-jwt-keys
          secret:
            secretName: fence-jwt-keys
        - configMap:
            name: privacy-policy
          name: privacy-policy
        - configMap:
            name: fence-yaml-merge
            optional: true
          name: yaml-merge
      containers:
        - name: fence
          image: "quay.io/cdis/fence:2021.12"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: container
              containerPort: 6567
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_status
              port: http
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /_status
              port: http
          resources:
            limits:
              cpu: 1
              memory: 2400Mi
            requests:
              cpu: 100m
              memory: 128Mi
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
              python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
              if [[ -f /fence/keys/key/jwt_private_key.pem ]]; then
                openssl rsa -in /fence/keys/key/jwt_private_key.pem -pubout > /fence/keys/key/jwt_public_key.pem
              fi
              bash /fence/dockerrun.bash && if [[ -f /dockerrun.sh ]]; then bash /dockerrun.sh; fi
          env:
            - name: DD_ENABLED
              valueFrom:
                configMapKeyRef:
                  key: dd_enabled
                  name: manifest-global
                  optional: true
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_TRACE_SAMPLE_RATE
              value: "1"
            - name: GEN3_UWSGI_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  key: uwsgi-timeout
                  name: manifest-global
                  optional: true
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: AWS_STS_REGIONAL_ENDPOINTS
              value: regional
            - name: PYTHONPATH
              value: /var/www/fence
            - name: GEN3_DEBUG
              value: "False"
            - name: FENCE_PUBLIC_CONFIG
              valueFrom:
                configMapKeyRef:
                  key: fence-config-public.yaml
                  name: manifest-fence
                  optional: true
          volumeMounts:
            - mountPath: /var/www/fence/local_settings.py
              name: old-config-volume
              readOnly: true
              subPath: local_settings.py
            - mountPath: /var/www/fence/fence_credentials.json
              name: json-secret-volume
              readOnly: true
              subPath: fence_credentials.json
            - mountPath: /var/www/fence/creds.json
              name: creds-volume
              readOnly: true
              subPath: creds.json
            - mountPath: /var/www/fence/config_helper.py
              name: config-helper
              readOnly: true
              subPath: config_helper.py
            - mountPath: /fence/fence/static/img/logo.svg
              name: logo-volume
              readOnly: true
              subPath: logo.svg
            - mountPath: /fence/fence/static/privacy_policy.md
              name: privacy-policy
              readOnly: true
              subPath: privacy_policy.md
            - mountPath: /var/www/fence/fence-config.yaml
              name: config-volume
              readOnly: true
              subPath: fence-config.yaml
            - mountPath: /var/www/fence/yaml_merge.py
              name: yaml-merge
              readOnly: true
              subPath: yaml_merge.py
            - mountPath: /var/www/fence/fence_google_app_creds_secret.json
              name: fence-google-app-creds-secret-volume
              readOnly: true
              subPath: fence_google_app_creds_secret.json
            - mountPath: /var/www/fence/fence_google_storage_creds_secret.json
              name: fence-google-storage-creds-secret-volume
              readOnly: true
              subPath: fence_google_storage_creds_secret.json
            - mountPath: /fence/keys/key/jwt_private_key.pem
              name: fence-jwt-keys
              readOnly: true
              subPath: jwt_private_key.pem
      initContainers:
        - name: fence-init
          image: "quay.io/cdis/fence:2022.05"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: container
              containerPort: 6567
              protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 2400Mi
            requests:
              cpu: 100m
              memory: 128Mi
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              # echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
              # python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
              if fence-create migrate --help > /dev/null 2>&1; then
                if ! grep -E 'ENABLE_DB_MIGRATION"?: *false' /var/www/fence/fence-config.yaml; then
                  echo "Running db migration: fence-create migrate"
                  fence-create migrate
                else
                  echo "Db migration disabled in fence-config"
                fi
              else
                echo "Db migration not available in this version of fence"
              fi
          volumeMounts:
            - mountPath: /var/www/fence/fence-config.yaml
              name: config-volume
              readOnly: true
              subPath: fence-config.yaml
            - mountPath: /var/www/fence/yaml_merge.py
              name: yaml-merge
              readOnly: true
              subPath: yaml_merge.py
            - mountPath: /var/www/fence/fence_google_app_creds_secret.json
              name: fence-google-app-creds-secret-volume
              readOnly: true
              subPath: fence_google_app_creds_secret.json
            - mountPath: /var/www/fence/fence_google_storage_creds_secret.json
              name: fence-google-storage-creds-secret-volume
              readOnly: true
              subPath: fence_google_storage_creds_secret.json
          env:
            
            - name: PYTHONPATH
              value: /var/www/fence
            - name: FENCE_PUBLIC_CONFIG
              valueFrom:
                configMapKeyRef:
                  key: fence-config-public.yaml
                  name: manifest-fence
                  optional: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fence
              topologyKey: kubernetes.io/hostname
            weight: 100
---
# Source: fence/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: fence-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-11.2.6
    app.kubernetes.io/instance: fence
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  replicas: 1
  serviceName: fence-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: fence
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: fence-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-11.2.6
        app.kubernetes.io/instance: fence
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: fence
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      initContainers:
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.3.0-debian-10-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fence-postgresql
                  key: postgres-password
            - name: POSTGRES_DB
              value: "fence"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=fence" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "postgres" -d "dbname=fence" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: fence/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fence
  labels:
    helm.sh/chart: fence-0.1.0
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
    app.kubernetes.io/version: "2022.05"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: "ingress.local"
      http:
        paths:
          - path: /user(/|$)(.*)
            pathType: Prefix
            backend:
              service: 
                name: fence
                port: 
                  number: 80
---
# Source: fence/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "fence-test-connection"
  labels:
    helm.sh/chart: fence-0.1.0
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
    app.kubernetes.io/version: "2022.05"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['fence:80']
  restartPolicy: Never
