apiVersion: apps/v1
kind: Deployment
metadata:
  name: fence
  labels:
    helm.sh/chart: fence-0.1.0
    app.kubernetes.io/name: fence
    app.kubernetes.io/instance: fence
    app.kubernetes.io/version: "2021.12"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: fence
      app.kubernetes.io/instance: fence
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fence
        app.kubernetes.io/instance: fence
    spec:
      serviceAccountName: fence-sa
      securityContext:
        {}
      volumes:
        - name: old-config-volume
          secret:
            secretName: fence-secret
        - name: json-secret-volume
          secret:
            secretName: fence-json-secret
        - name: creds-volume
          secret:
            secretName: fence-creds
        - configMap:
            name: config-helper
          name: config-helper
        - configMap:
            name: logo-config
          name: logo-volume
        - name: config-volume
          secret:
            secretName: fence-config
        - name: fence-google-app-creds-secret-volume
          secret:
            secretName: fence-google-app-creds-secret
        - name: fence-google-storage-creds-secret-volume
          secret:
            secretName: fence-google-storage-creds-secret
        - name: fence-jwt-keys
          secret:
            secretName: fence-jwt-keys
        - name: cert-volume
          secret:
            secretName: cert-fence-service
        - name: ca-volume
          secret:
            secretName: service-ca
        - configMap:
            name: privacy-policy
          name: privacy-policy
        - configMap:
            name: fence-yaml-merge
          name: yaml-merge
      containers:
        - name: fence
          securityContext:
            fsGroup: 101
          image: "quay.io/cdis/fence:2021.12"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: container
              containerPort: 6567
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_status
              port: http
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /_status
              port: http
          resources:
            limits:
              cpu: 1
              memory: 2400Mi
            requests:
              cpu: 0.4
              memory: 1200Mi
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
              python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
              bash /fence/dockerrun.bash && if [[ -f /dockerrun.sh ]]; then bash /dockerrun.sh; fi
          env:
            - name: DD_ENABLED
              valueFrom:
                configMapKeyRef:
                - key: dd_enabled
                  name: manifest-global
                  optional: true
                - name: DD_ENV
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/env']
                - name: DD_SERVICE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/service']
                - name: DD_VERSION
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.labels['tags.datadoghq.com/version']
                - name: DD_LOGS_INJECTION
                  value: "true"
                - name: DD_PROFILING_ENABLED
                  value: "true"
                - name: DD_TRACE_SAMPLE_RATE
                  value: "1"
                - name: GEN3_UWSGI_TIMEOUT
                  valueFrom:
                    configMapKeyRef:
                      key: uwsgi-timeout
                      name: manifest-global
                      optional: true
                - name: DD_AGENT_HOST
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
                - name: AWS_STS_REGIONAL_ENDPOINTS
                  value: regional
                - name: PYTHONPATH
                  value: /var/www/fence
                - name: GEN3_DEBUG
                  value: "False"
                - name: FENCE_PUBLIC_CONFIG
                  valueFrom:
                    configMapKeyRef:
                      key: fence-config-public.yaml
                      name: manifest-fence
                      optional: true
        volumeMounts:
          - mountPath: /var/www/fence/local_settings.py
            name: old-config-volume
            readOnly: true
            subPath: local_settings.py
          - mountPath: /var/www/fence/fence_credentials.json
            name: json-secret-volume
            readOnly: true
            subPath: fence_credentials.json
          - mountPath: /var/www/fence/creds.json
            name: creds-volume
            readOnly: true
            subPath: creds.json
          - mountPath: /var/www/fence/config_helper.py
            name: config-helper
            readOnly: true
            subPath: config_helper.py
          - mountPath: /fence/fence/static/img/logo.svg
            name: logo-volume
            readOnly: true
            subPath: logo.svg
          - mountPath: /fence/fence/static/privacy_policy.md
            name: privacy-policy
            readOnly: true
            subPath: privacy_policy.md
          - mountPath: /var/www/fence/fence-config-secret.yaml
            name: config-volume
            readOnly: true
            subPath: fence-config.yaml
          - mountPath: /var/www/fence/yaml_merge.py
            name: yaml-merge
            readOnly: true
            subPath: yaml_merge.py
          - mountPath: /var/www/fence/fence_google_app_creds_secret.json
            name: fence-google-app-creds-secret-volume
            readOnly: true
            subPath: fence_google_app_creds_secret.json
          - mountPath: /var/www/fence/fence_google_storage_creds_secret.json
            name: fence-google-storage-creds-secret-volume
            readOnly: true
            subPath: fence_google_storage_creds_secret.json
          - mountPath: /mnt/ssl/service.crt
            name: cert-volume
            readOnly: true
            subPath: service.crt
          - mountPath: /mnt/ssl/service.key
            name: cert-volume
            readOnly: true
            subPath: service.key
          - mountPath: /usr/local/share/ca-certificates/cdis/cdis-ca.crt
            name: ca-volume
            readOnly: true
            subPath: ca.pem
          - mountPath: /fence/jwt-keys.tar
            name: fence-jwt-keys
            readOnly: true
            subPath: jwt-keys.tar
      initContainers:
        - name: fence-init
          securityContext:
            fsGroup: 101
          image: "quay.io/cdis/fence:2021.12"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: container
              containerPort: 6567
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_status
              port: http
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /_status
              port: http
          resources:
            limits:
              cpu: 1
              memory: 2400Mi
            requests:
              cpu: 0.4
              memory: 1200Mi
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              echo "${FENCE_PUBLIC_CONFIG:-""}" > "/var/www/fence/fence-config-public.yaml"
              python /var/www/fence/yaml_merge.py /var/www/fence/fence-config-public.yaml /var/www/fence/fence-config-secret.yaml > /var/www/fence/fence-config.yaml
              if fence-create migrate --help > /dev/null 2>&1; then
                if ! grep -E 'ENABLE_DB_MIGRATION"?: *false' /var/www/fence/fence-config.yaml; then
                  echo "Running db migration: fence-create migrate"
                  fence-create migrate
                else
                  echo "Db migration disabled in fence-config"
                fi
              else
                echo "Db migration not available in this version of fence"
              fi
        volumeMounts:
          - mountPath: /var/www/fence/fence-config-secret.yaml
            name: config-volume
            readOnly: true
            subPath: fence-config.yaml
          - mountPath: /var/www/fence/yaml_merge.py
            name: yaml-merge
            readOnly: true
            subPath: yaml_merge.py
          - mountPath: /var/www/fence/fence_google_app_creds_secret.json
            name: fence-google-app-creds-secret-volume
            readOnly: true
            subPath: fence_google_app_creds_secret.json
          - mountPath: /var/www/fence/fence_google_storage_creds_secret.json
            name: fence-google-storage-creds-secret-volume
            readOnly: true
            subPath: fence_google_storage_creds_secret.json
        env:
          - name: PYTHONPATH
            value: /var/www/fence
          - name: FENCE_PUBLIC_CONFIG
            valueFrom:
              configMapKeyRef:
                key: fence-config-public.yaml
                name: manifest-fence
                optional: true
      affinity:
        labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - fence
          topologyKey: kubernetes.io/hostname

